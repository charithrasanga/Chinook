@using Chinook.Models;
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Chinook</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="playlist/1">
                <i class="bi bi-music-note-list me-3" style="font-size: 1.25em"></i>My favorite tracks
            </NavLink>
        </div>
        <NavLink class="nav-link" @onclick="()=>expandSubNav = !expandSubNav">
            <span class="oi oi-list-rich" aria-hidden="true"></span> My Playlists
        </NavLink>
        @if (expandSubNav)
        {
           @* <NavLink class="expand-menu" href="">
                <span>Sub1</span>
            </NavLink>
            <NavLink class="" href="">
                <span>Sub2</span>
            </NavLink>*@
            @if (playlist is not null)
            {
                @foreach (var item in playlist)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@("/playlist/"+item.PlaylistId)">
                            <i class="bi bi-box2-heart me-3" style="font-size: 1.25em"></i>@item.Name
                        </NavLink>
                    </div>
                }
            }
        }
       

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] private IRepositoryWrapper _repository { get; set; }
    private List<Playlist> playlist;
    private string userId;
    private bool expandSubNav;

    protected override async Task OnInitializedAsync()
    {
        //  return base.OnInitializedAsync();
        userId = await GetUserId();
        await InvokeAsync(StateHasChanged);

        playlist = await _repository.UserPlaylists
        .FindByCondition(p => p.UserId.Equals(userId))
        .Include(p => p.Playlist)
        .Select(x => new Playlist
            {
                Name = x.Playlist.Name,
                PlaylistId = x.PlaylistId
            })
        .ToListAsync();
    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }
}
