@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter Artist..." @bind="Filter" @bind:event="oninput">
    </div>

    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in Artists)
            {
                if (!IsVisible(artist))
                    continue;
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    [Inject] private IRepositoryWrapper _repository { get; set; }
    public string Filter { get; set; }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
    }

    public async Task<List<Artist>> GetArtists()
    {
        return await _repository.Artists.FindAll().Include(x=>x.Albums).ToListAsync();

    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var data = await _repository.Albums.FindByCondition(a => a.ArtistId == artistId).Include(t=>t.Tracks).ToListAsync();
        return data;

    }

    public bool IsVisible(Artist artist)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (artist.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
