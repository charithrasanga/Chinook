@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] private IRepositoryWrapper _repository { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist Artist;
    private List<PlaylistTrack> Tracks;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private List<Models.Playlist> playlist;
    private int modelSelectedPlayListId;
    private string modelNewPlayListName;
    private bool needToCreateNewPlayList = false;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        Artist = _repository.Artists.FindByCondition(a => a.ArtistId == ArtistId).SingleOrDefault()!;

        Tracks = _repository.Tracks.FindByCondition(t => t.Album.ArtistId == ArtistId)
        .Include(t => t.Album)
        .Select(t => new PlaylistTrack()
            {
                AlbumTitle = (t.Album == null ? "-" : t.Album.Title),
                TrackId = t.TrackId,
                TrackName = t.Name,
                IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "Favorites")).Any()
            })
        .ToList();



        playlist = await _repository.UserPlaylists
        .FindByCondition(p => p.UserId.Equals(CurrentUserId))
        .Include(p => p.Playlist)
        .Select(x => new Models.Playlist
            {
                Name = x.Playlist.Name,
                PlaylistId = x.PlaylistId
            })
        .ToListAsync();

    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);


        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private void AddTrackToPlaylist()
    {
        var trackFromDb = _repository.Tracks.FindByCondition(x => x.TrackId == SelectedTrack.TrackId).First();
        var playlist = new Models.Playlist();
        var selectedListName = default(string);

        if (needToCreateNewPlayList)
        {
            if (string.IsNullOrWhiteSpace(modelNewPlayListName))
            {
                CloseInfoMessage();
                InfoMessage = $"Playlist name must not be empty";
                PlaylistDialog.Close();
                return;
            }

            var maxPlayListId = _repository.Playlists.FindAll().OrderByDescending(x => x.PlaylistId).First().PlaylistId;
            maxPlayListId++;

            playlist.Name = modelNewPlayListName;
            playlist.PlaylistId = maxPlayListId;
            var userPlaylist = new UserPlaylist() { UserId = CurrentUserId, PlaylistId = maxPlayListId };
            List<UserPlaylist> userPlaylists = new List<UserPlaylist>();
            userPlaylists.Add(userPlaylist);
            playlist.UserPlaylists = userPlaylists;

            _repository.Playlists.Create(playlist);
            _repository.Save();

            playlist = _repository.Playlists.FindByCondition(x => x.PlaylistId == maxPlayListId).First();
            playlist.Tracks.Add(trackFromDb);

            _repository.Playlists.Update(playlist);
            selectedListName = modelNewPlayListName;

        }
        else
        {
            playlist = _repository.Playlists.FindByCondition(x => x.PlaylistId == modelSelectedPlayListId).First();
            playlist.Tracks.Add(trackFromDb);
            _repository.Playlists.Update(playlist);
            selectedListName = playlist.Name;

        }

        _repository.Save();

        CloseInfoMessage();
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {selectedListName}.";
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    protected async void SelectedPlaylistChanged(ChangeEventArgs ddlChangedEvent)
    {
        modelSelectedPlayListId = Convert.ToInt32(ddlChangedEvent.Value.ToString());
        needToCreateNewPlayList = false;
        this.StateHasChanged();
    }

    protected async void NewPlaylistNameChanged(ChangeEventArgs textChangedEvent)
    {
        modelNewPlayListName = textChangedEvent.Value.ToString();
        needToCreateNewPlayList = true;
        this.StateHasChanged();
    }

}

<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="SelectedPlaylistChanged">
                @if (playlist is not null)
                {
                    @foreach (var item in playlist)
                    {
                        <option value="@item.PlaylistId">@item.Name</option>
                    }
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input @onchange="NewPlaylistNameChanged" type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
