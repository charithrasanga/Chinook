@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;


<div class="row">
    <div class="col-8">
        <h1>Playlist <strong>@Playlist.Name</strong></h1>
    </div>
    <div class="col-4">
        <div class="btn-group  push-right" role="group" aria-label="action-buttons">
            <button type="button" class="btn btn-outline-warning" @onclick="Rename_Click">Rename Playlist</button>
            <button type="button" class="btn btn-outline-danger" @onclick="Delete_Click">Delete Playlist</button>
        </div>

    </div>
</div>


@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Confirm @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDelete_Click" ConfirmationMessage=@($"Are you sure you want to delete this playlist")></Confirm>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] private IRepositoryWrapper _repository { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    @inject NavigationManager NavManager
    private Modal RenamePlaylistDialog { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;

    protected ConfirmBase DeleteConfirmation { get; set; }
    private string modelNewPlayListName;

    protected override async Task OnParametersSetAsync()
    {
        CurrentUserId = await GetUserId();

        await InvokeAsync(StateHasChanged);

        Playlist = _repository.Playlists.FindAll()
           .Include(a => a.Tracks).ThenInclude(a => a.Album).ThenInclude(a => a.Artist)
           .Where(p => p.PlaylistId == PlaylistId)
           .Select(p => new ClientModels.Playlist()
               {
                   Name = p.Name,
                   Tracks = p.Tracks.Select(t => new ClientModels.PlaylistTrack()
                   {
                       AlbumTitle = t.Album.Title,
                       ArtistName = t.Album.Artist.Name,
                       TrackId = t.TrackId,
                       TrackName = t.Name,
                       IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "Favorites")).Any()
                   }).ToList()
               })
           .FirstOrDefault();


    }


    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async void FavoriteTrack(long trackId)
    {
        var userId = await GetUserId();
        await  _repository.UserPlaylists.EnsureUserHasfavoritePlayListAsync(userId);
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        var favList= await _repository.UserPlaylists.FindByCondition(x => x.UserId == userId && x.Playlist.Name == "Favorites").Include(y=>y.Playlist).FirstAsync();
        var trackFromDb = _repository.Tracks.FindByCondition(x => x.TrackId == track.TrackId).Include(x=>x.Playlists).First();

        _repository.UserPlaylists.AddTrackToFavouriteList(trackId, favList.PlaylistId);

        //  trackFromDb.Playlists.Add(favList.Playlist);
        // _repository.Tracks.Update(trackFromDb);
        //// favList.Playlist.Tracks.Add(trackFromDb);
        //_repository.UserPlaylists.Update(favList);
        //  _repository.Save();
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
        StateHasChanged();
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var userId = await GetUserId();
        var track = Playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        var favList = await _repository.UserPlaylists.FindByCondition(x => x.UserId == userId && x.Playlist.Name == "Favorites").Include(y => y.Playlist).FirstAsync();
        var listId = favList.PlaylistId;
        StateHasChanged();
        _repository.UserPlaylists.RemoveTrackFromFavouriteList(trackId, listId);



        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void RemoveTrack(long trackId)
    {
        CloseInfoMessage();

    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    protected void Delete_Click()
    {
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {

            var result= _repository.UserPlaylists.RemovePlaylist(CurrentUserId, PlaylistId);

            CloseInfoMessage();
            if (result)
            {
                InfoMessage = "Playlist has been removed";
                NavManager.NavigateTo("/");
            }
            else
            {
                InfoMessage = "Error removing playlist";    

            }

        }
    }

    protected void Rename_Click()
    {
        RenamePlaylistDialog.Open();
    }

    protected  void NewPlaylistNameChanged(ChangeEventArgs textChangedEvent)
    {
        modelNewPlayListName = textChangedEvent.Value.ToString();
        this.StateHasChanged();
    }

    private void AddTrackToPlaylist()
    {
        if (string.IsNullOrWhiteSpace(modelNewPlayListName))
        {
            CloseInfoMessage();
            InfoMessage = $"Playlist name must not be empty";
            RenamePlaylistDialog.Close();
            return;
        }

        var playListTobeRenamed= _repository.Playlists.FindByCondition(x => x.PlaylistId == PlaylistId).First();
        playListTobeRenamed.Name = modelNewPlayListName;

        _repository.Playlists.Update(playListTobeRenamed);
        _repository.Save();
        RenamePlaylistDialog.Close();
        CloseInfoMessage();
        InfoMessage = $"Playlist renamed";

    }
}

<Modal @ref="RenamePlaylistDialog">
    <Title>
        Rename playlist | @Playlist.Name
    </Title>
    <Body>
        
        <div class="form-group mb-2">
            <label for="NewPlaylist">Enter new name</label>
            <input @onchange="NewPlaylistNameChanged" type="text" id="NewPlaylist" value="@Playlist.Name" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

